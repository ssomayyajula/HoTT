{-# OPTIONS --without-K #-}

module Reversible.Pi.Level0 where

open import Type using (Type; Type‚ÇÄ; Type‚ÇÅ)
open import Zero using (ùüò)
open import OneTypes
open import One
open import Paths using (_==_; refl; _‚óæ_; _‚óæ-; -‚óæ_; !; ap; apd; tpt; tpt‚óæ; tpt‚àò; loops; tpt-loops; !!; ‚óæunitl; ‚óæinvl; tpt-paths; tpt-paths-l; tpt-paths-r; ap‚àò; ap!; ap‚óæ; ‚óæassoc; !‚óæ)
open import Coproduct
open import DependentSum using (Œ£; _√ó_; _,_; p‚ÇÅ; p‚ÇÇ; uncurry)
open import PathsInSigma
open import Functions using (_‚àò_; id)
open import Equivalences
open import Univalence
open import NaturalNumbers
open import PropositionalTruncation
open import Homotopies using (happly; _‚àº_)

open import Reversible.Pi.Syntax hiding (!)
open import Reversible.Utils

open import EmbeddingsInUniverse using (module UnivalentUniverseOfFiniteTypes)
open UnivalentUniverseOfFiniteTypes

M : Type‚ÇÅ
M = Œ£ Type‚ÇÄ is-finite

size : U ‚Üí ‚Ñï
size ZERO = 0
size ONE  = 1
size (PLUS  t‚ÇÅ t‚ÇÇ) = add (size t‚ÇÅ) (size t‚ÇÇ)
size (TIMES t‚ÇÅ t‚ÇÇ) = mult (size t‚ÇÅ) (size t‚ÇÇ)

fromSize : ‚Ñï ‚Üí U
fromSize = rec‚Ñï U ZERO (Œª _ ‚Üí PLUS ONE)

‚Ñï-U-is-retract : is-retract ‚Ñï U
‚Ñï-U-is-retract = size , fromSize , ind‚Ñï _ (refl _) (Œª _ ‚Üí ap succ)

#‚ü¶_‚üß‚ÇÄ : U ‚Üí Type‚ÇÄ
#‚ü¶ ZERO ‚üß‚ÇÄ        = ùüò
#‚ü¶ ONE  ‚üß‚ÇÄ        = ùüô
#‚ü¶ PLUS  t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ + #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ
#‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß‚ÇÄ = #‚ü¶ t‚ÇÅ ‚üß‚ÇÄ √ó #‚ü¶ t‚ÇÇ ‚üß‚ÇÄ

canonicalU : U ‚Üí U
canonicalU = fromSize ‚àò size

size+ : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí PLUS (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (add n‚ÇÅ n‚ÇÇ)
size+ 0         n‚ÇÇ = unite‚Çäl
size+ (succ n‚ÇÅ) n‚ÇÇ = assocr‚Çä ‚óé (id‚ü∑ ‚äï size+ n‚ÇÅ n‚ÇÇ)

size* : (n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí TIMES (fromSize n‚ÇÅ) (fromSize n‚ÇÇ) ‚ü∑ fromSize (mult n‚ÇÅ n‚ÇÇ)
size* 0         n‚ÇÇ = absorbr
size* (succ n‚ÇÅ) n‚ÇÇ = dist ‚óé ((unite‚ãÜl ‚äï size* n‚ÇÅ n‚ÇÇ) ‚óé size+ n‚ÇÇ (mult n‚ÇÅ n‚ÇÇ))

normalizeC : (t : U) ‚Üí t ‚ü∑ canonicalU t
normalizeC ZERO = id‚ü∑
normalizeC ONE  = uniti‚Çäl ‚óé swap‚Çä
normalizeC (PLUS t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äï normalizeC t‚ÇÅ) ‚óé size+ (size t‚ÇÄ) (size t‚ÇÅ) 
normalizeC (TIMES t‚ÇÄ t‚ÇÅ) =
  (normalizeC t‚ÇÄ ‚äó normalizeC t‚ÇÅ) ‚óé size* (size t‚ÇÄ) (size t‚ÇÅ)

size-el : (n : ‚Ñï) ‚Üí #‚ü¶ fromSize n ‚üß‚ÇÄ == El n
size-el 0        = refl ùüò
size-el (succ n) = ap (_+_ ùüô) (size-el n)

#‚ü¶_‚üß‚ÇÅ : {X Y : U} ‚Üí X ‚ü∑ Y ‚Üí #‚ü¶ X ‚üß‚ÇÄ ‚âÉ #‚ü¶ Y ‚üß‚ÇÄ
#‚ü¶ id‚ü∑ ‚üß‚ÇÅ = ide _
#‚ü¶ unite‚Çäl ‚üß‚ÇÅ = (Œª { (i‚ÇÅ ()); (i‚ÇÇ x) ‚Üí x }) ,
  qinv-is-equiv (i‚ÇÇ , (Œª { (i‚ÇÅ ()); x@(i‚ÇÇ _) ‚Üí refl x }) , refl)
#‚ü¶ swap‚Çä ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÇ x; (i‚ÇÇ x) ‚Üí i‚ÇÅ x }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ x) ‚Üí i‚ÇÇ x; (i‚ÇÇ x) ‚Üí i‚ÇÅ x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
#‚ü¶ assocl‚Çä ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÅ (i‚ÇÅ x); (i‚ÇÇ (i‚ÇÅ x)) ‚Üí i‚ÇÅ (i‚ÇÇ x); (i‚ÇÇ (i‚ÇÇ x)) ‚Üí i‚ÇÇ x }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (i‚ÇÅ x)) ‚Üí i‚ÇÅ x; (i‚ÇÅ (i‚ÇÇ x)) ‚Üí i‚ÇÇ (i‚ÇÅ x); (i‚ÇÇ x) ‚Üí i‚ÇÇ (i‚ÇÇ x) }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ (i‚ÇÅ _)) ‚Üí refl x; x@(i‚ÇÇ (i‚ÇÇ _)) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ (i‚ÇÅ _)) ‚Üí refl x; x@(i‚ÇÅ (i‚ÇÇ _)) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
#‚ü¶ unite‚ãÜl ‚üß‚ÇÅ = (Œª { (_ , x) ‚Üí x }) ,
  qinv-is-equiv ((Œª x ‚Üí (0‚ÇÅ , x)) , (Œª { x@(0‚ÇÅ , _) ‚Üí refl x }) , refl)
#‚ü¶ swap‚ãÜ ‚üß‚ÇÅ = (Œª { (x , y) ‚Üí (y , x) }) , qinv-is-equiv ((Œª { (x , y) ‚Üí (y , x) }) , refl , refl)
#‚ü¶ assocl‚ãÜ ‚üß‚ÇÅ = (Œª { (x , y , z) ‚Üí ((x , y) , z) }) ,
  qinv-is-equiv ((Œª { ((x , y) , z) ‚Üí x , y , z }) , refl , refl)
#‚ü¶ absorbr ‚üß‚ÇÅ = (Œª { (() , _) }) , qinv-is-equiv ((Œª ()) , (Œª { (() , _) }) , (Œª ()))
#‚ü¶ dist ‚üß‚ÇÅ = (Œª { (i‚ÇÅ x , y) ‚Üí i‚ÇÅ (x , y); (i‚ÇÇ x , y) ‚Üí i‚ÇÇ (x , y) }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (x , y)) ‚Üí i‚ÇÅ x , y; (i‚ÇÇ (x , y)) ‚Üí i‚ÇÇ x , y }) ,
    (Œª { x@(i‚ÇÅ _ , _) ‚Üí refl x; x@(i‚ÇÇ _ , _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))
{- #‚ü¶ distl ‚üß‚ÇÅ = (Œª { (x , i‚ÇÅ y) ‚Üí i‚ÇÅ (x , y); (x , i‚ÇÇ y) ‚Üí i‚ÇÇ (x , y) }) ,
  qinv-is-equiv ((Œª { (i‚ÇÅ (x , y)) ‚Üí x , i‚ÇÅ y; (i‚ÇÇ (x , y)) ‚Üí x , i‚ÇÇ y }) ,
    (Œª { x@(_ , i‚ÇÅ _) ‚Üí refl x; x@(_ , i‚ÇÇ _) ‚Üí refl x }) ,
    (Œª { x@(i‚ÇÅ _) ‚Üí refl x; x@(i‚ÇÇ _) ‚Üí refl x }))-}
#‚ü¶ _‚ü∑_.! f ‚üß‚ÇÅ = !e #‚ü¶ f ‚üß‚ÇÅ
#‚ü¶ f ‚óé g ‚üß‚ÇÅ = #‚ü¶ g ‚üß‚ÇÅ ‚óè #‚ü¶ f ‚üß‚ÇÅ
#‚ü¶ f ‚äï g ‚üß‚ÇÅ =
  let (f , e) = #‚ü¶ f ‚üß‚ÇÅ in
  let (f‚Åª¬π , Œµf , Œ∑f) = hae-is-qinv e in
  let (g , e) = #‚ü¶ g ‚üß‚ÇÅ in
  let (g‚Åª¬π , Œµg , Œ∑g) = hae-is-qinv e in
  (Œª { (i‚ÇÅ x) ‚Üí i‚ÇÅ (f x); (i‚ÇÇ x) ‚Üí i‚ÇÇ (g x) }) ,
    qinv-is-equiv ((Œª { (i‚ÇÅ y) ‚Üí i‚ÇÅ (f‚Åª¬π y); (i‚ÇÇ y) ‚Üí i‚ÇÇ (g‚Åª¬π y) }) ,
      (Œª { (i‚ÇÅ x) ‚Üí ap i‚ÇÅ (Œµf x); (i‚ÇÇ x) ‚Üí ap i‚ÇÇ (Œµg x) }) ,
      (Œª { (i‚ÇÅ y) ‚Üí ap i‚ÇÅ (Œ∑f y); (i‚ÇÇ y) ‚Üí ap i‚ÇÇ (Œ∑g y) }))
#‚ü¶ f ‚äó g ‚üß‚ÇÅ =
  let (f , e) = #‚ü¶ f ‚üß‚ÇÅ in
  let (f‚Åª¬π , Œµf , Œ∑f) = hae-is-qinv e in
  let (g , e) = #‚ü¶ g ‚üß‚ÇÅ in
  let (g‚Åª¬π , Œµg , Œ∑g) = hae-is-qinv e in
  (Œª { (a , b) ‚Üí (f a , g b) }) ,
    qinv-is-equiv ((Œª { (c , d) ‚Üí (f‚Åª¬π c , g‚Åª¬π d) }) ,
      (Œª { (a , b) ‚Üí pair= (Œµf a , Œµg b) }) ,
      (Œª { (c , d) ‚Üí pair= (Œ∑f c , Œ∑g d) }))

‚ü¶_‚üß‚ÇÄ : U ‚Üí M
‚ü¶ T ‚üß‚ÇÄ = #‚ü¶ T ‚üß‚ÇÄ , size T , ‚à£ ua #‚ü¶ normalizeC T ‚üß‚ÇÅ ‚óæ size-el _ ‚à£

‚ü¶_‚üß‚ÇÄ‚Åª¬π : M ‚Üí U
‚ü¶ _ , n , _ ‚üß‚ÇÄ‚Åª¬π = fromSize n

‚ü¶‚ü¶_‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π : (T : U) ‚Üí ‚ü¶ ‚ü¶ T ‚üß‚ÇÄ ‚üß‚ÇÄ‚Åª¬π ‚ü∑ T
‚ü¶‚ü¶ T ‚üß‚ÇÄ‚üß‚ÇÄ‚Åª¬π = _‚ü∑_.! (normalizeC T)

module _ {‚Ñì} {‚Ñì'} {‚Ñì''} {A : Type ‚Ñì} {P : A ‚Üí Type ‚Ñì'} {Q : Œ£ A P ‚Üí Type ‚Ñì''} {x y : A} {uz : Œ£ (P x) (Œª u ‚Üí Q (x , u))} where
  tpt-dpair : (p : x == y) ‚Üí tpt (Œª x ‚Üí Œ£ (P x) (Œª u ‚Üí Q (x , u))) p uz == (tpt P p (p‚ÇÅ uz) , tpt Q (dpair= (p , refl (tpt P p (p‚ÇÅ uz)))) (p‚ÇÇ uz))
  tpt-dpair (refl _) = refl _

module _ {‚Ñì} {‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'} {x y : A} {b : B} where
  tpt-const : (p : x == y) ‚Üí tpt (Œª _ ‚Üí B) p b == b
  tpt-const (refl _) = refl _

module _ {‚Ñì} {‚Ñì'} {A : Type ‚Ñì} {P : A ‚Üí Type ‚Ñì'} {x y : A} {ux : P x} {uy : P y} where
  tpt-trunc : (p : x == y) ‚Üí tpt P p ux == uy ‚Üí tpt (‚à•_‚à• ‚àò P) p ‚à£ ux ‚à£ == ‚à£ uy ‚à£
  tpt-trunc (refl _) (refl _) = refl _

module _ {‚Ñì} {‚Ñì'} {A : Type ‚Ñì} {P : A ‚Üí Type ‚Ñì'} {x y : A} {ux : P x} {uy : P y} where
  ap-p‚ÇÅ-dpair : (p : x == y) (up : tpt P p ux == uy) ‚Üí ap p‚ÇÅ (dpair= (p , up)) == p
  ap-p‚ÇÅ-dpair (refl _) (refl _) = refl _

module _ {‚Ñì} {‚Ñì'} {A : Type ‚Ñì} {x y : A} {B : Type ‚Ñì'} {b : B} where
  ap-p‚ÇÇ-refl : (p : x == y) ‚Üí ap p‚ÇÇ (dpair= (p , refl (tpt (Œª _ ‚Üí B) p b))) == ! (tpt-const p)
  ap-p‚ÇÇ-refl (refl _) = refl _

‚ü¶‚ü¶_‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ : (X : M) ‚Üí ‚à• ‚ü¶ ‚ü¶ X ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == X ‚à•
‚ü¶‚ü¶ T , n , p ‚üß‚ÇÄ‚Åª¬π‚üß‚ÇÄ = recTrunc (‚à• ‚ü¶ ‚ü¶ T , n , p ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == T , n , p ‚à•) (‚à£_‚à£ ‚àò lem) identify p
  where
  eq : (m : ‚Ñï) ‚Üí #‚ü¶ fromSize m ‚üß‚ÇÄ == El m
  eq zero = refl _
  eq (succ m) = ap (_+_ ùüô) (eq m)

  ueq : (x y : M) ‚Üí (x == y) ‚âÉ (p‚ÇÅ x ‚âÉ p‚ÇÅ y)
  ueq x y = (tpt-eqv p‚ÇÅ) , (finite-types-is-univ x y)
  
  lem : T == El n ‚Üí ‚ü¶ ‚ü¶ T , n , p ‚üß‚ÇÄ‚Åª¬π ‚üß‚ÇÄ == T , n , p
  lem (refl .(El _)) = p‚ÇÅ (p‚ÇÇ (ueq _ _)) (path-to-eqv (eq n))
